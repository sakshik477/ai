RAIL FENCE

#include<stdio.h>
#include<string.h>
int main(void)
{
int i,j,k,l;
char a[20],c[20],d[20];
printf("\n\t\tRAIL FENCE TECHNIQUE");
printf("\n\nENTER THE INPUT STRING:");
gets(a);
l=strlen(a);

for(i=0,j=0;i<l;i++)
{
if(i%2==0)
c[j++]=a[i];
}
for(i=0;i<l;i++)
{
if(i%2==1)
c[j++]=a[i];
}
c[j]='\0';
printf("\nCIPHER TEXT AFTER APPLYING RAIL FENCE:");
printf("\n%s",c);

if(l%2==0)
k=l/2;
else
k=(l/2)+1;
for(i=0,j=0;i<k;i++)
{
d[j]=c[i];j=j+2;
}
for(i=k,j=1;i<l;i++)
{
d[j]=c[i];
j=j+2;
}
d[l]='\0';
printf("\nTEST AFTER DECRYPTION:");
printf("%s",d);
}



import math

def encrypt(plaintext, key):
    ciphertext = [''] * key
    for column in range(key):
        pointer = column
        while pointer < len(plaintext):
            ciphertext[column] += plaintext[pointer]
            pointer += key
    return ''.join(ciphertext)

def decrypt(ciphertext, key):
    plaintext = [''] * math.ceil(len(ciphertext) / key)
    numRows = math.ceil(len(ciphertext) / key)
    numCols = key
    numShaded = (numCols * numRows) - len(ciphertext)
    col = 0
    row = 0
    for symbol in ciphertext:
        plaintext[row] += symbol
        row += 1
        if (row == numRows) or (row == numRows - 1 and col >= numCols - numShaded):
            row = 0
            col += 1
    return ''.join(plaintext)

# Example usage
plaintext = "hello world"
key = 4
ciphertext = encrypt(plaintext, key)
decrypted_text = decrypt(ciphertext, key)

print(f"Plaintext: {plaintext}")
print(f"Ciphertext: {ciphertext}")
print(f"Decrypted text: {decrypted_text}")
